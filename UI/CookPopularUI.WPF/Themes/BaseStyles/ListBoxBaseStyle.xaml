<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:CookPopularUI.WPF"
                    xmlns:pt="https://github.cookpopulartoolkit/2021/xaml"
                    xmlns:ui="clr-namespace:CookPopularUI.WPF.Controls">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/CookPopularUI.WPF;component/Themes/Styles/ButtonStyle.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="DefaultListBoxItemStyle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource FixedControlBaseStyle}">
        <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Path=(local:ItemsControlAttached.ItemWidth)}" />
        <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Path=(local:ItemsControlAttached.ItemHeight)}" />
        <Setter Property="Padding" Value="{StaticResource DefaultPadding}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <ui:SimpleGrid Background="{TemplateBinding Background}">
                        <ui:Ripple Feedback="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Path=(ui:RippleAssist.Feedback)}" Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Path=(ui:RippleAssist.IsDisabled), Converter={pt:BooleanToVisibilityReConverter}}" />
                        <ContentPresenter Content="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          IsHitTestVisible="False"
                                          TextElement.Foreground="{TemplateBinding Foreground}" />
                    </ui:SimpleGrid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource ControlForegroundBrush}" />
                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Path=(local:ItemsControlAttached.ItemMouseOverBrush)}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource ControlForegroundBrush}" />
                            <Setter Property="Background" Value="{DynamicResource PrimaryThemeBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Path=(local:ItemsControlAttached.ItemSelectedBrush)}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MultiListBoxItemStyle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource DefaultListBoxItemStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <ControlTemplate.Resources>
                        <local:ItemControlTypeToVisibilityConverter x:Key="ItemControlTypeToVisibilityConverter" />
                    </ControlTemplate.Resources>
                    <Border x:Name="ItemBorder">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ui:Ripple Grid.ColumnSpan="2" Feedback="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Path=(ui:RippleAssist.Feedback)}" Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Path=(ui:RippleAssist.IsDisabled), Converter={pt:BooleanToVisibilityReConverter}}" />
                            <ContentPresenter x:Name="ItemContent" Grid.Column="0"
                                              Content="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                              Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              IsHitTestVisible="False"
                                              TextElement.Foreground="{TemplateBinding Foreground}" />
                            <ui:SimpleGrid x:Name="ItemGrid" Grid.Column="1"
                                           Width="{TemplateBinding Height}"
                                           Height="{TemplateBinding Height}">
                                <CheckBox x:Name="ItemCheckBox"
                                          Content="{TemplateBinding local:ItemsControlAttached.CheckBoxContent}"
                                          IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsSelected, Mode=TwoWay}"
                                          HorizontalAlignment="Center" VerticalAlignment="Center"
                                          local:ItemsControlAttached.IsCheckBoxChecked="{TemplateBinding IsSelected}"
                                          ui:CheckBoxAssistant.FillBrush="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Path=(ui:CheckBoxAssistant.FillBrush)}"
                                          Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Path=(local:ItemsControlAttached.ItemControlType), Converter={StaticResource ItemControlTypeToVisibilityConverter}, ConverterParameter={x:Static local:ItemControlType.CheckBox}}" />
                                <Button x:Name="ItemButton"
                                        Width="{Binding ElementName=ItemGrid, Path=ActualWidth}"
                                        Height="{Binding ElementName=ItemGrid, Path=ActualHeight}"
                                        Content="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Path=(local:ItemsControlAttached.ButtonContent)}"
                                        Focusable="True"
                                        local:FrameworkElementBaseAttached.CornerRadius="2"
                                        local:ItemsControlAttached.IsButtonDeleteItem="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Path=(local:ItemsControlAttached.IsButtonDeleteItem)}"
                                        Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Path=(local:ItemsControlAttached.ItemControlType), Converter={StaticResource ItemControlTypeToVisibilityConverter}, ConverterParameter={x:Static local:ItemControlType.Button}}"
                                        Style="{StaticResource ButtonTransparentStyle}" />
                                <Path x:Name="ItemIcon"
                                      Width="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Path=(local:ItemsControlAttached.ItemControlWidth)}"
                                      Height="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Path=(local:ItemsControlAttached.ItemControlHeight)}"
                                      Data="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content.GeometryData}"
                                      Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Path=(local:ItemsControlAttached.IconFill)}"
                                      Stretch="Uniform"
                                      Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Path=(local:ItemsControlAttached.ItemControlType), Converter={StaticResource ItemControlTypeToVisibilityConverter}, ConverterParameter={x:Static local:ItemControlType.Icon}}" />
                                <ui:Gif x:Name="ItemImageGif"
                                        Width="{Binding ElementName=ItemGrid, Path=ActualWidth}"
                                        Height="{Binding ElementName=ItemGrid, Path=ActualHeight}"
                                        Source="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content.ImageSource}"
                                        GifSource="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content.GifSource}"
                                        local:ItemsControlAttached.IsPreviewImageGif="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Path=(local:ItemsControlAttached.IsPreviewImageGif)}"
                                        Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Path=(local:ItemsControlAttached.ItemControlType), Converter={StaticResource ItemControlTypeToVisibilityConverter}, ConverterParameter={x:Static local:ItemControlType.ImageGif}}" />
                            </ui:SimpleGrid>
                            <Popup x:Name="Popup_PreviewImageGif"
                                   AllowsTransparency="True" IsOpen="False" Placement="Right"
                                   PopupAnimation="Slide">
                                <ui:SimpleGrid>
                                    <Image Width="300" Height="300" Source="{Binding ElementName=ItemImageGif, Path=Source}" />
                                    <ui:Gif Width="300" Height="300" GifSource="{Binding ElementName=ItemImageGif, Path=GifSource}" />
                                </ui:SimpleGrid>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Path=(local:ItemsControlAttached.ItemControlType)}" Value="Default">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ItemGrid" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Path=(local:ItemsControlAttached.ItemControlType)}" Value="Icon">
                            <Setter Property="Content" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content.Content}" TargetName="ItemContent" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Path=(local:ItemsControlAttached.ItemControlType)}" Value="ImageGif">
                            <Setter Property="Content" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content.Content}" TargetName="ItemContent" />
                        </DataTrigger>
                        <!--  鼠标仅在ImageGif之上时触发  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" SourceName="ItemImageGif" />
                                <Condition Property="local:ItemsControlAttached.IsPreviewImageGif" Value="True" SourceName="ItemImageGif" />
                            </MultiTrigger.Conditions>
                            <Setter Property="IsOpen" Value="True" TargetName="Popup_PreviewImageGif" />
                        </MultiTrigger>
                        <!--  鼠标在整个ListBoxItem之上时触发  -->
                        <!--<MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsMouseOver}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=Selector},Path=(local:ItemsControlAttached.IsPreviewImageGif)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsOpen" Value="True" TargetName="Popup_PreviewImage"/>
                        </MultiDataTrigger>-->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource ControlForegroundBrush}" />
                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Path=(local:ItemsControlAttached.ItemMouseOverBrush)}" TargetName="ItemBorder" />
                            <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=TemplatedParent}}" TargetName="ItemButton" />
                            <Setter Property="Fill" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=TemplatedParent}}" TargetName="ItemIcon" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource ControlForegroundBrush}" />
                            <Setter Property="Background" Value="{DynamicResource PrimaryThemeBrush}" TargetName="ItemBorder" />
                            <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=TemplatedParent}}" TargetName="ItemButton" />
                            <Setter Property="Fill" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=TemplatedParent}}" TargetName="ItemIcon" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Path=(local:ItemsControlAttached.ItemSelectedBrush)}" TargetName="ItemBorder" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ListBoxBaseStyle" TargetType="{x:Type ListBox}" BasedOn="{StaticResource ControlBaseStyle}">
        <Setter Property="Background" Value="{DynamicResource SystemBackgroundBrush}" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource DefaultListBoxItemStyle}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="ScrollViewer.PanningRatio" Value="2" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
        <Setter Property="VirtualizingPanel.CacheLengthUnit" Value="Item" />
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling" />
        <Setter Property="ui:RippleAssist.IsDisabled" Value="False" />
        <Setter Property="ui:RippleAssist.Feedback" Value="{DynamicResource RippleFeedbackBrush}" />
        <Setter Property="ui:ScrollBarAssistant.IsShowScrollBarRepeatButton" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            CornerRadius="{TemplateBinding local:FrameworkElementBaseAttached.CornerRadius}">
                        <ScrollViewer Focusable="False"
                                      CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"
                                      HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                      VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
                                      ui:ScrollBarAssistant.HorizontalScrollBarHeight="{TemplateBinding ui:ScrollBarAssistant.HorizontalScrollBarHeight}"
                                      ui:ScrollBarAssistant.IsShowScrollBarRepeatButton="{TemplateBinding ui:ScrollBarAssistant.IsShowScrollBarRepeatButton}"
                                      ui:ScrollBarAssistant.VerticalScrollBarWidth="{TemplateBinding ui:ScrollBarAssistant.VerticalScrollBarWidth}">
                            <!--<StackPanel x:Name="ItemsPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" IsItemsHost="True" />-->
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="True" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>